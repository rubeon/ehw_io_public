apiVersion: v1
kind: Template
labels:
    template: ehwio-psql-example
    app: django-psql-example
message: >
    The following service(s) have been created in your project: ${NAME},
    ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template,
    including OpenShift considerations, see
    https://github.com/openshift/django-ex/blob/master/README.md.",
metadata:
    name: ehwio-psql-example
    annotations:
        description: >
            An example Django application with a PostgreSQL database. For more
            information about using this template, including OpenShift
            considerations, see
             https://github.com/openshift/django-ex/blob/master/README.md.
             \n\nWARNING: Any data stored will be lost upon pod destruction.
             Only use this template for testing.
        iconClass: icon-python
        openshift.io/documentation-url: https://github.com/rubeon/ehw_io_public
        openshift.io/display-name: EHW.io + PostgreSQL (Ephemeral)
        openshift.io/long-description: >
            This template defines resources needed to develop a Django based
            application, including a build configuration, application deployment
            configuration, and database deployment configuration.  The database
            is stored in non-persistent storage, so this configuration should
            be used for experimental purposes only.

        openshift.io/provider-display-name: EHW.io, Ltd.
        openshift.io/support-url": https://ehw.io
    tags: quickstart,python,django
    template.openshift.io/bindable: false


objects:
    - kind: Secret
      apiVersion: v1
      metadata:
          name: "${NAME}"
      stringData:
          database-user: "${DATABASE_USER}"
          database-password: "${DATABASE_PASSWORD}"
          django-secret-key: "${DJANGO_SECRET_KEY}"
    - kind: Service
      apiVersion: v1
      metadata:
          name: "${NAME}"
          annotations:
              description: Exposes and load balances the application pods
              service.alpha.openshift.io/dependencies: "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
      spec:
        ports:
            - name: web
              port: 8080
              targetPort: 8080
        selector:
            name: "${NAME}"
    - kind: Route
      apiVersion: v1
      metadata:
          name: "${NAME}"
      spec:
          host: "${APPLICATION_DOMAIN}"
          to:
              kind: Service
              name: "${NAME}"

    - kind: ImageStream
      apiVersion: v1
      metadata:
          name: "${NAME}"
          annotations:
              description: Keeps track of changes in the application image
    - kind: BuildConfig
      apiVersion: v1
      metadata:
          annotations:
              description: Defines how to build the application
              template.alpha.openshift.io/wait-for-ready: true
          name: "${NAME}"
      spec:
          output:
              to:
                  kind: ImageStream
                  name: "${NAME}:latest"
          postCommit:
              script: ./manage.py test
          source:
              type: Git
              contextDir: "${CONTEXT_DIR}"
              git:
                  uri: "${SOURCE_REPOSITORY_URL}"
                  ref: "${SOURCE_REPOSITORY_REF}"
          strategy:
              type: Source
              sourceStrategy:
                  from:
                      kind: ImageStream
                      namespace: "${NAMESPACE}"
                      name: python:${PYTHON_VERSION}"
                  env:
                      - name: PIP_INDEX_URL
                        value: ${PIP_INDEX_URL}
        triggers:
            - type: ImageChange
            - type: ConfigChange
            - type: GitHub
              github:
                  secret: "${GITHUB_WEBHOOK_SECRET}"
    - kind: DeploymentConfig
      apiVersion: v1
      metadata:
          name: "${NAME}"
          annotations:
              description: Defines how to deploy the application server
              template.alpha.openshift.io/wait-for-ready: true
      spec:
          replicas: 1
          selector:
              name: "${NAME}"
          strategy:
              type: Recreate
          triggers:
              - type: ImageChange
                imageChangeParams:
                    automatic: true
                    containerNames:
                        - ehwio-psql-example
                    from:
                        kind: ImageStreamTag
                        name: "${NAME}:latest"
              - type: ConfigChange
          template:
              metadata:
                  name: "${NAME}"
                  labels:
                      name: "${NAME}"
                  spec:
                      containers:
                          - env:
                              - name: DATABASE_SERVICE_NAME
                                value: "${DATABASE_SERVICE_NAME}"
                              - name: DATABASE_ENGINE
                                value: "${DATABASE_ENGINE}"
                              - name: DATABASE_NAME
                                value: "${DATABASE_NAME}"
                              - name: DATABASE_USER
                                secretKeyRef:
                                    key: database-user
                                    name: "${NAME}"
                              - name: DATABASE_PASSWORD
                                valueFrom:
                                    secretKeyRef:
                                        key: database-password
                                        name: "${NAME}"
                              - name: APP_CONFIG
                                value: "${APP_CONFIG}"
                              - name: DJANGO_SECRET_KEY
                                valueFrom:
                                    secretKeyRef:
                                        key: django-secret-key
                                        name: "${NAME}"
                          image: " "
                          livenessProbe:
                              httpGet:
                                  path: /health
                                  port: 8080
                          name: ehwio-psql-example
                          ports:
                              - containerPort: 8080
                          readinessProbe:
                              httpGet:
                                  path: /health
                                  port: 8080
                              initialDelaySeconds: 3
                              timeoutSeconds: 3
                          resources:
                              limits:
                                  memory: "${MEMORY_LIMIT}"
          triggers:
              - type: ImageChange
                imageChangeParams:
                  automatic: true
                  containerNames:
                      - ehwio-psql-example
                  from:
                      kind: ImageStreamTag
                      name: "${NAME}:latest"
              - type: ConfigChange
    - kind: Service
      apiVersion: v1
      metadata:
          annotations:
              description: Expose the database server
              name: "${DATABASE_SERVICE_NAME}"
      spec:
          ports:
              - name: postgresql
                port: 5432
                targetPort: 5432
          selector:
              name: ${DATABASE_SERVICE_NAME}
    - kind: DeploymentConfig
      apiVersion: v1
      metadata:
          annotations:
              description: Defines how to deploy the database
              template.alpha.openshift.io/wait-for-ready: true
          name: "${DATABASE_SERVICE_NAME}"
      spec:
          replicas: 1
          selector:
              name: "${DATABASE_SERVICE_NAME}"
          strategy:
              type: Recreate
          template:
              metadata:
                  labels:
                      name: "${DATABASE_SERVICE_NAME}"
                  name: "${DATABASE_SERVICE_NAME}"
              spec:
                  containers:
                    - name: postgresql
                      env:
                          - name: POSTGRESQL_USER
                            valueFrom:
                                secretKeyRef:
                                    key: database-user
                                    name: "${NAME}"
                          - name: POSTGRESQL_PASSWORD
                            valueFrom:
                                secretKeyRef:
                                    key: database-password
                                    name: "${NAME}"
                      image: ''
                      livenessProbe:
                          initialDelaySeconds: 120
                          timeoutSeconds: 10
                          exec:
                              command:
                                  - /usr/libexec/check-container
                                  - --live

                      ports:
                          - containerPort: 5432
                      readinessProbe:
                          exec:
                              command:
                                  - /usr/libexec/check-container
                          initialDelaySeconds: 5
                          timeoutSeconds: 1
                      resources:
                          limits:
                              memory: "${MEMORY_POSTGRESQL_LIMIT}"
                      volumeMounts:
                          - mountPath: /var/lib/pgsql/data
                            name: data
                  volumes:
                      - emptyDir: ""
                        name: data
          triggers:
              - imageChangeParams:
                  automatic: true
                  containerNames:
                      - postgresql
                  from:
                      kind: ImageStreamTag
                      name: postgresql:${POSTGRESQL_VERSION}
                      namespace: ${NAMESPACE}
              - type: ImageChange
              - type: ConfigChange
parameters:
    - name: NAME
      displayName: Name
      description: The name assigned to all of the frontend objects defined in this template.
      required: True
      value: ehwio-psql-example
    - name: NAMESPACE
      description: The OpenShift Namespace where the ImageStream resides.
      displayName: Namespace
      required: True
      value: 'openshift'
    - name: PYTHON_VERSION
      description: Version of Python image to be used
      displayName: Version of python image
      required: True
      value: 2.7
    - name: POSTGRESQL_VERSION
      displayName: Version of PostgreSQL image
      description: The value of PostgreSQL to be used
      required: True
      value: 9.6
    - name: MEMORY_LIMIT
      description: Maximum amount of memory the Django container can use.
      displayName: Memory limit
      required: True
      value: 512Mi
    - name: MEMORY_POSTGRESQL_LIMIT
      displayName: Memory limit (PostgreSQL)
      description: Maximum amount of memory the PostgreSQL container can use.
      required: True
      value: 512Mi
    - name: SOURCE_REPOSITORY_URL
      displayName: Git Repository URL
      description: The URL of the repository with your application source code.
      required: True
      value: https://github.com/rubeon/ehw_io_public
    - name: SOURCE_REPOSITORY_REF
      description: Branch or tag name for the release to be deployed
      displayName: Git Reference
    - name: CONTEXT_DIR
      description: Set this to the relative path to your project if it is not in the root of your repository
      displayName: Context Directory
    - name: APPLICATION_DOMAIN
      displayName:Application Hostname
      description: The exposed hostname that will route to the Django service, if left blank a value will be defaulted.
      value: ''
    - name: GITHUB_WEBHOOK_SECRET
      displayName: GitHub WebHook Secret
      description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
      from: "[a-zA-Z0-9]{40}"
      generate: expression
    - name: DATABASE_ENGINE
      displayName: Database Engine
      description: Database engine: postgresql, mysql, or sqlite (default)
      required: True
      value: postgresql
    - name: DATABASE_SERVICE_NAME
      displayName: Database Service Name
      required: True
      value: postgresql
    - name: DATABASE_NAME
      displayName: Database Name
      required: True
      value: default
    - name: DATABASE_USER
      displayName: Database User
      required: True
      value: django
    - name: DATABASE_PASSWORD
      displayName: Database User Password
      from: "[a-zA-Z0-9]{16}"
      generate: expression
    - name: APP_CONFIG
      description: Relative path to Gunicorn configuration file (optional).
      displayName: Application Configuration File Path
    - name: DJANGO_SECRET_KEY
      description: Set this to a long random string
      displayName: Django Secret Key
      from: "[\\w]{50}"
      generate: expression
    - name: PIP_INDEX_URL
      description: The custom PyPi index URL
      displayName: Custom PyPi Index URL
      value: ''
